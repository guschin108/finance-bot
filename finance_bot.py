#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
import json
import sys
from excur.excur import *
from telegram import *
from telegram.ext import *

logging.basicConfig(format='Finance bot: %(levelname)s: %(name)s: %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

main_kb = [['–û–±–º–µ–Ω –≤–∞–ª—é—Ç']]

def start(update, context):
    kb = main_kb
    user = update.message.from_user.first_name
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç, ' + user + '!\n'
        '\n–Ø –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç üí∞\n'
        '\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:'
        '\n–û–±–º–µ–Ω –≤–∞–ª—é—Ç - –ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç',
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))


CITY, CURRENCY = range(2)

—Åities = ['–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ë–∞—Ä–Ω–∞—É–ª', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–í–æ—Ä–æ–Ω–µ–∂',
          '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ò–∂–µ–≤—Å–∫', '–ò—Ä–∫—É—Ç—Å–∫', '–ö–∞–∑–∞–Ω—å', '–ö–µ–º–µ—Ä–æ–≤–æ',
          '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–ú–æ—Å–∫–≤–∞',
          '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
          '–û–º—Å–∫', '–û—Ä–µ–Ω–±—É—Ä–≥', '–ü–µ–Ω–∑–∞', '–ü–µ—Ä–º—å', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–†—è–∑–∞–Ω—å',
          '–°–∞–º–∞—Ä–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–°–∞—Ä–∞—Ç–æ–≤', '–¢–æ–ª—å—è—Ç—Ç–∏', '–¢–æ–º—Å–∫',
          '–¢—é–º–µ–Ω—å', '–£–ª—å—è–Ω–æ–≤—Å–∫', '–£—Ñ–∞', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å']

—Åities_url = {
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å' : 'Astrakhan',
    '–ë–∞—Ä–Ω–∞—É–ª' : 'Barnaul',
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫' : 'Vladivostok',
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥' : 'Volgograd',
    '–í–æ—Ä–æ–Ω–µ–∂' : 'Voronezh',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' : 'Yekaterinburg',
    '–ò–∂–µ–≤—Å–∫' : 'Izhevsk',
    '–ò—Ä–∫—É—Ç—Å–∫' : 'Irkutsk',
    '–ö–∞–∑–∞–Ω—å' : 'Kazan',
    '–ö–µ–º–µ—Ä–æ–≤–æ' : 'Kemerovo',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' : 'Krasnodar',
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' : 'Krasnoyarsk',
    '–ú–∞—Ö–∞—á–∫–∞–ª–∞' : 'Makhachkala',
    '–ú–æ—Å–∫–≤–∞' : 'Moscow',
    '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã' : 'Naberezhnye_Chelny',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' : 'Nizhniy_Novgorod',
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫' : 'Novokuzneck',
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' : 'Novosibirsk',
    '–û–º—Å–∫' : 'Omsk',
    '–û—Ä–µ–Ω–±—É—Ä–≥' : 'Orenburg',
    '–ü–µ–Ω–∑–∞' : 'Penza',
    '–ü–µ—Ä–º—å' : 'Perm',
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' : 'Rostov-On-Don',
    '–†—è–∑–∞–Ω—å' : 'Ryazan',
    '–°–∞–º–∞—Ä–∞' : 'Samara',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' : 'Saint-Petersburg',
    '–°–∞—Ä–∞—Ç–æ–≤' : 'Saratov',
    '–¢–æ–ª—å—è—Ç—Ç–∏' : 'Tolyatti',
    '–¢–æ–º—Å–∫' : 'Tomsk',
    '–¢—é–º–µ–Ω—å' : 'Tyumen',
    '–£–ª—å—è–Ω–æ–≤—Å–∫' : 'Ulyanovsk',
    '–£—Ñ–∞' : 'Ufa',
    '–•–∞–±–∞—Ä–æ–≤—Å–∫' : 'Khabarovsk',
    '–ß–µ–ª—è–±–∏–Ω—Å–∫' : 'Chelyabinsk',
    '–Ø—Ä–æ—Å–ª–∞–≤–ª—å' : 'Yaroslavl',
}

city_kb = [['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'], ['–ú–æ—Å–∫–≤–∞'], ['–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞'], ['–û—Ç–º–µ–Ω–∞']]

city_fkb = [['–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'], ['–ë–∞—Ä–Ω–∞—É–ª'], ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'], ['–í–æ–ª–≥–æ–≥—Ä–∞–¥'],
            ['–í–æ—Ä–æ–Ω–µ–∂'], ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'], ['–ò–∂–µ–≤—Å–∫'], ['–ò—Ä–∫—É—Ç—Å–∫'], ['–ö–∞–∑–∞–Ω—å'],
            ['–ö–µ–º–µ—Ä–æ–≤–æ'], ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'], ['–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'], ['–ú–∞—Ö–∞—á–∫–∞–ª–∞'],
            ['–ú–æ—Å–∫–≤–∞'], ['–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã'], ['–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'],
            ['–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫'], ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'], ['–û–º—Å–∫'], ['–û—Ä–µ–Ω–±—É—Ä–≥'],
            ['–ü–µ–Ω–∑–∞'], ['–ü–µ—Ä–º—å'], ['–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'], ['–†—è–∑–∞–Ω—å'], ['–°–∞–º–∞—Ä–∞'],
            ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'], ['–°–∞—Ä–∞—Ç–æ–≤'], ['–¢–æ–ª—å—è—Ç—Ç–∏'], ['–¢–æ–º—Å–∫'],
            ['–¢—é–º–µ–Ω—å'], ['–£–ª—å—è–Ω–æ–≤—Å–∫'], ['–£—Ñ–∞'], ['–•–∞–±–∞—Ä–æ–≤—Å–∫'], ['–ß–µ–ª—è–±–∏–Ω—Å–∫'],
            ['–Ø—Ä–æ—Å–ª–∞–≤–ª—å'], ['–û—Ç–º–µ–Ω–∞']]

currencies = ['–î–æ–ª–ª–∞—Ä –°–®–ê', '–ï–≤—Ä–æ']
currency_kb = [currencies, ['–û—Ç–º–µ–Ω–∞']]

def exchange_rate_start(update, context):
    user = update.message.from_user.first_name
    kb = city_kb
    update.message.reply_text(
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!',
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

    return CITY

def exchange_rate_other_city(update, context):
    user = update.message.from_user.first_name
    kb = city_fkb
    update.message.reply_text(
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥!',
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

    return CITY

def exchange_rate_city(update, context):
    city = update.message.text
    context.user_data['city'] = city

    kb = currency_kb
    update.message.reply_text(
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É!',
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

    return CURRENCY

def exchange_rate_make_answer(context):
    try:
        city = —Åities_url[context.user_data['city']]
    except:
        raise

    try:
        currency = context.user_data['currency']
    except:
        raise

    try:
        data = excur_get_data(city)
    except:
        raise

    if currency == '–î–æ–ª–ª–∞—Ä –°–®–ê':
        return ('–ü—Ä–æ–¥–∞—Ç—å –î–æ–ª–ª–∞—Ä –°–®–ê : ' + excur_usd_best_buy_get(data) + '\n'
                '–ö—É–ø–∏—Ç—å –î–æ–ª–ª–∞—Ä –°–®–ê  : ' + excur_usd_best_sell_get(data) + '\n'
                '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —Å —Å–∞–π—Ç–∞ excur.ru/' + city)
    elif currency == '–ï–≤—Ä–æ':
        return ('–ü—Ä–æ–¥–∞—Ç—å –ï–≤—Ä–æ : ' + excur_euro_best_buy_get(data) + '\n'
                '–ö—É–ø–∏—Ç—å –ï–≤—Ä–æ  : ' + excur_euro_best_sell_get(data) + '\n'
                '\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —Å —Å–∞–π—Ç–∞ excur.ru/' + city)
    raise

def exchange_rate_done(context):
    if 'city' in context.user_data:
        del context.user_data['city']

    if 'currency' in context.user_data:
        del context.user_data['currency']

def exchange_rate_currency(update, context):
    currency = update.message.text
    context.user_data['currency'] = currency

    answer = ''

    try:
        answer = exchange_rate_make_answer(context)
    except:
        answer = '–ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!'

    kb = main_kb
    update.message.reply_text(
        answer,
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

    exchange_rate_done(context)
    return ConversationHandler.END

def exchange_rate_cancel(update, context):
    kb = main_kb
    update.message.reply_text(
        '–û—Ç–º–µ–Ω–µ–Ω–æ',
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

    exchange_rate_done(context)
    return ConversationHandler.END

def main(token):
    updater = Updater(token, use_context=True)

    exchange_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text('–û–±–º–µ–Ω –≤–∞–ª—é—Ç'),
                      exchange_rate_start)],
        states={
            CITY: [MessageHandler(Filters.text(—Åities),
                                  exchange_rate_city),
                   MessageHandler(Filters.text('–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞'),
                                  exchange_rate_other_city)],
            CURRENCY: [MessageHandler(Filters.text(currencies),
                       exchange_rate_currency)],
        },
        fallbacks=[MessageHandler(Filters.text, exchange_rate_cancel)]
    )

    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(exchange_handler)

    updater.start_polling(poll_interval=1, timeout=5, bootstrap_retries=3)

    logger.info('Ready!')
    updater.idle()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Finance bot")
    parser.add_argument('-c', '--config', default='config.json')
    args = parser.parse_args()

    try:
        config = json.load(open(args.config, 'r'))
    except:
        logger.error('configuration file not found or formatted incorrectly')
        exit()

    try:
        token = config['token']
    except:
        logger.error('token not specified')
        exit()

    main(token)
